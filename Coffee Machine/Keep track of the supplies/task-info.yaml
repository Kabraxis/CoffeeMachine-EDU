type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |-
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        static int stockWater = 400;
        static int stockMilk = 540;
        static int stockCoffeeBeans = 120;
        static int stockCups = 9;
        static int stockMoney = 550;

        public static void main(String[] args) {
            displayMachineStatus();
            selectMenu();
            displayMachineStatus();
        }

        public static void displayMachineStatus() {
            System.out.printf("The coffee machine has:%n" +
                            "%d ml of water%n" +
                            "%d ml of milk%n" +
                            "%d g of coffee beans%n" +
                            "%d disposable cups%n" +
                            "$%d of money%n%n",
                    stockWater, stockMilk, stockCoffeeBeans, stockCups, stockMoney);
        }

        public static void selectMenu() {
            String message = "Write action (buy, fill, take): ";
            System.out.println(message);
            switch (getValidMenuAction()) {
                case "buy":
                    selectDrink();
                    break;
                case "fill":
                    fillStock();
                    break;
                case "take":
                    takeMoney();
                    break;
                default:
                    selectMenu();
            }
        }

        public static void selectDrink() {
            String displayedMessage = "What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:";
            System.out.println(displayedMessage);
            switch (getValidIntegerSelectDrink()) {
                case 1:
                    processEspresso(1);
                    break;
                case 2:
                    processLatte(1);
                    break;
                case 3:
                    processCappuccino(1);
                    break;
                default:
                    selectDrink();
                    break;
            }
        }

        public static void processEspresso(int orderedAmount) {
            int costWater = 250;
            int costMilk = 0;
            int costCoffeeBeans = 16;
            int costCups = 1;

            int chargeMoney = 4;

            alterStock(orderedAmount, costWater, costMilk, costCoffeeBeans, costCups, chargeMoney);
        }

        public static void processLatte(int orderedAmount) {
            int costWater = 350;
            int costMilk = 75;
            int costCoffeeBeans = 20;
            int costCups = 1;

            int chargeMoney = 7;

            alterStock(orderedAmount, costWater, costMilk, costCoffeeBeans, costCups, chargeMoney);
        }

        public static void processCappuccino(int orderedAmount) {
            int costWater = 200;
            int costMilk = 100;
            int costCoffeeBeans = 12;
            int costCups = 1;

            int chargeMoney = 6;

            alterStock(orderedAmount, costWater, costMilk, costCoffeeBeans, costCups, chargeMoney);
        }

        public static void alterStock(int orderedAmount, int costWater, int costMilk, int costCoffeeBeans, int costCups, int chargeMoney) {
            stockWater -= orderedAmount * costWater;
            stockMilk -= orderedAmount * costMilk;
            stockCoffeeBeans -= orderedAmount * costCoffeeBeans;
            stockCups -= orderedAmount * costCups;
            stockMoney += chargeMoney;
        }

        public static void fillStock() {
            String howMuchWater = "Write how many ml of water you want to add:";
            String howMuchMilk = "Write how many ml of milk you want to add:";
            String howMuchCoffeeBeans = "Write how many grams of coffee beans you want to add:";
            String howMuchCups = "Write how many disposable cups of coffee you want to add:";
            System.out.println(howMuchWater);
            stockWater += getValidIntegerStock();
            System.out.println(howMuchMilk);
            stockMilk += getValidIntegerStock();
            System.out.println(howMuchCoffeeBeans);
            stockCoffeeBeans += getValidIntegerStock();
            System.out.println(howMuchCups);
            stockCups += getValidIntegerStock();
        }

        public static void takeMoney() {
            stockMoney -= stockMoney;
            System.out.printf("I gave you $%d%n%n", stockMoney);
        }

        public static int getValidIntegerStock() {
            String errorMessage = "You may only add amounts of 0 and above";
            Scanner scanner = new Scanner(System.in);
            int inputStock = scanner.nextInt();
            while (inputStock < 0) {
                System.out.println(errorMessage);
                inputStock = scanner.nextInt();
            }
            return inputStock;
        }

        public static String getValidMenuAction() {
            Scanner scanner = new Scanner(System.in);
            String errorMessage = "You should enter buy, fill or take";
            while (!scanner.hasNext("(?i)buy|fill|take")) {
                System.out.println(errorMessage);
                scanner.next();
            }
            return scanner.nextLine().toLowerCase();
        }

        public static int getValidIntegerSelectDrink() {
            Scanner scanner = new Scanner(System.in);
            String errorMessage = "You should enter numbers 1, 2 or 3";
            int selectDrink = scanner.nextInt();
            while (selectDrink < 0 || selectDrink > 3) {
                System.out.println(errorMessage);
                selectDrink = scanner.nextInt();
            }
            return selectDrink;
        }
    }

    /*
    - Now you need to input amounts of water, milk, and coffee beans that your coffee machine has at the moment.

    - If the coffee machine has enough supplies to make the specified amount of coffee, the program should print "Yes, I can make that amount of coffee".
    - If the coffee machine can make more than that, the program should output "Yes, I can make that amount of coffee (and even N more than that)",
    where N is the number of additional cups of coffee that the coffee machine can make.
    - If the amount of resources is not enough to make the specified amount of coffee, the program should output "No, I can make only N cup(s) of coffee".

    - Like in the previous stage, the coffee machine needs 200 ml of water, 50 ml of milk, and 15 g of coffee beans to make one cup of coffee.


    Examples
    The program should firstly request for water, then milk, then beans, and then the number of cups.
    The symbol > represents the user input. Note that it's not part of the input.

    Example 1

    Write how many ml of water the coffee machine has:
    > 300
    Write how many ml of milk the coffee machine has:
    > 65
    Write how many grams of coffee beans the coffee machine has:
    > 100
    Write how many cups of coffee you will need:
    > 1
    Yes, I can make that amount of coffee
    Example 2

    Write how many ml of water the coffee machine has:
    > 500
    Write how many ml of milk the coffee machine has:
    > 250
    Write how many grams of coffee beans the coffee machine has:
    > 200
    Write how many cups of coffee you will need:
    > 10
    No, I can make only 2 cup(s) of coffee
    Example 3

    Write how many ml of water the coffee machine has:
    > 1550
    Write how many ml of milk the coffee machine has:
    > 299
    Write how many grams of coffee beans the coffee machine has:
    > 300
    Write how many cups of coffee you will need:
    > 3
    Yes, I can make that amount of coffee (and even 2 more than that)
    Example 4

    Write how many ml of water the coffee machine has:
    > 0
    Write how many ml of milk the coffee machine has:
    > 0
    Write how many grams of coffee beans the coffee machine has:
    > 0
    Write how many cups of coffee you will need:
    > 1
    No, I can make only 0 cup(s) of coffee
    Example 5

    Write how many ml of water the coffee machine has:
    > 0
    Write how many ml of milk the coffee machine has:
    > 0
    Write how many grams of coffee beans the coffee machine has:
    > 0
    Write how many cups of coffee you will need:
    > 0
    Yes, I can make that amount of coffee
    Example 6

    Write how many ml of water the coffee machine has:
    > 200
    Write how many ml of milk the coffee machine has:
    > 50
    Write how many grams of coffee beans the coffee machine has:
    > 15
    Write how many cups of coffee you will need:
    > 0
    Yes, I can make that amount of coffee (and even 1 more than that)
    * */
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5333#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 01 Sep 2022 15:41:12 UTC
record: 4
